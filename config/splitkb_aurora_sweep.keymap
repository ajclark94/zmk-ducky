/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        FUNCTION {
            bindings = <&mo 3>;
            key-positions = <30 33>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <10 19>;
        };

        mins_combo {
            bindings = <&kp MINUS>;
            key-positions = <3 6>;
        };

        unds_combo {
            bindings = <&kp UNDER>;
            key-positions = <13 16>;
        };

        esc_combo {
            bindings = <&kp ESC>;
            key-positions = <0 9>;
        };

        grave_combo {
            bindings = <&kp GRAVE>;
            key-positions = <2 7>;
        };

        tilde_combo {
            bindings = <&kp TILDE>;
            key-positions = <12 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp Q  &kp W  &kp E      &kp R                     &kp T        &kp Y        &kp U      &kp I    &kp O          &kp P
&kp A  &kp S  &kp D      &kp F                     &kp G        &kp H        &kp J      &kp K    &kp L  &kp SEMICOLON
&kp Z  &kp X  &kp C      &kp V                     &kp B        &kp N        &kp M  &kp COMMA  &kp DOT      &kp SLASH
                     &lt 3 TAB  &mt LEFT_SHIFT BACKSPACE  &lt 2 SPACE  &lt 1 ENTER
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        EXTEND {
            bindings = <
     &kp ESC    &kp K_BACK      &kp K_FIND     &kp K_FORWARD    &kp INS  &trans    &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&sk LEFT_ALT  &sk LEFT_GUI  &sk LEFT_SHIFT  &sk LEFT_CONTROL     &trans  &trans          &kp LEFT             &kp UP              &kp DOWN              &kp RIGHT
   &kp LC(Z)     &kp LC(X)       &kp LC(C)          &kp LGUI  &kp LC(V)  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET         &kp LESS_THAN       &kp GREATER_THAN
                                                       &mo 3     &trans  &trans             &none
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        SYM {
            bindings = <
       &trans         &kp AT          &kp HASH           &kp DLLR  &trans     &kp KP_EQUAL  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9    &kp KP_PLUS
&kp BACKSLASH       &kp PIPE          &kp EXCL        &kp PERCENT  &trans  &kp KP_ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6   &kp KP_MINUS
    &kp CARET  &kp AMPERSAND  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_DIVIDE
                                                           &trans  &trans            &none           &trans
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        FUNCTION {
            bindings = <
  &kp K_STOP      &kp C_RW      &kp C_PLAY          &kp C_FF  &kp C_BRIGHTNESS_INC    &kp F12  &kp F7  &kp F8  &kp F9   &kp LC(PLUS)
&sk LEFT_ALT  &sk LEFT_GUI  &sk LEFT_SHIFT  &sk LEFT_CONTROL  &kp C_BRIGHTNESS_DEC    &kp F11  &kp F4  &kp F5  &kp F6  &kp LC(MINUS)
  &kp K_MUTE  &kp K_VOL_DN   &kp LC(LS(C))      &kp K_VOL_UP         &kp LC(LS(V))    &kp F10  &kp F1  &kp F2  &kp F3     &kp LC(N0)
                                                       &none                 &none  &kp ENTER  &trans
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };
    };
};
