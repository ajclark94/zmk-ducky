/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <10 19>;
        };

        mins_combo {
            bindings = <&kp MINUS>;
            key-positions = <3 6>;
        };

        unds_combo {
            bindings = <&kp UNDER>;
            key-positions = <13 16>;
        };

        esc_combo {
            bindings = <&kp ESC>;
            key-positions = <0 9>;
        };

        grave_combo {
            bindings = <&kp GRAVE>;
            key-positions = <2 7>;
        };

        tilde_combo {
            bindings = <&kp TILDE>;
            key-positions = <12 17>;
        };

        less_combo {
            bindings = <&kp LESS_THAN>;
            key-positions = <4 5>;
        };

        greater_combo {
            bindings = <&kp GREATER_THAN>;
            key-positions = <14 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp Q  &kp W  &kp E      &kp R            &kp T                 &kp Y        &kp U      &kp I    &kp O          &kp P
&kp A  &kp S  &kp D      &kp F            &kp G                 &kp H        &kp J      &kp K    &kp L  &kp SEMICOLON
&kp Z  &kp X  &kp C      &kp V            &kp B                 &kp N        &kp M  &kp COMMA  &kp DOT      &kp SLASH
                     &lt 3 TAB  &lt 2 BACKSPACE  &mt LEFT_SHIFT SPACE  &lt 1 ENTER
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        EXTEND {
            bindings = <
     &kp ESC    &kp K_BACK      &kp K_FIND      &kp K_FORWARD        &kp INS  &trans    &trans  &trans    &trans     &trans
&sk LEFT_ALT  &sk LEFT_GUI  &sk LEFT_SHIFT   &sk LEFT_CONTROL  &sk LS(LCTRL)  &trans  &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT
   &kp LC(Z)     &kp LC(X)       &kp LC(C)          &kp LC(V)   &kp LEFT_GUI  &trans    &trans  &trans    &trans     &trans
                                            &kp LC(LS(GRAVE))  &kp LC(LS(P))  &trans     &none
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        SYM {
            bindings = <
     &kp PERCENT             &kp AT        &kp LEFT_BRACE        &kp RIGHT_BRACE   &kp AMPS  &kp EQUAL  &kp N7  &kp N8  &kp N9    &kp PLUS
&kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp EXCL  &kp ASTRK  &kp N4  &kp N5  &kp N6    &kp HASH
        &kp BSLH           &kp PIPE      &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp CARET     &kp N0  &kp N1  &kp N2  &kp N3  &kp DOLLAR
                                                                           &none      &none     &trans  &trans
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };

        FUNCTION {
            bindings = <
  &kp K_STOP      &kp C_RW      &kp C_PLAY          &kp C_FF  &kp C_BRIGHTNESS_INC     &kp F12  &kp F7  &kp F8  &kp F9   &kp LC(PLUS)
&kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp C_BRIGHTNESS_DEC     &kp F11  &kp F4  &kp F5  &kp F6  &kp LC(MINUS)
  &kp K_MUTE  &kp K_VOL_DN   &kp LC(LS(C))      &kp K_VOL_UP         &kp LC(LS(V))     &kp F10  &kp F1  &kp F2  &kp F3     &kp LC(N0)
                                                       &none                &trans  &kp KP_NUM  &trans
            >;

            sensor-bindings = <&inc_dec_kp A A &inc_dec_kp A A>;
        };
    };
};
